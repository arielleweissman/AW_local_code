libname cs 'h:\Shared\SAS\HBO GO\Subscription\CS Support\Call Volume Driver Q32017';
libname cs_old 'h:\Shared\SAS\HBO GO\Subscription\CS Support\Call Volume Driver';
 

/*1. update subscriber forecast 
*data newf; set pp;where month>='01jul2017'd;run;
*data oldwf; set cs.DF_forecast_monthly;where month<'01jul2017'd;run;

*data cs.forecast_monthly; set  oldwf  newf;run;

/*2. import program_date if needed there is an update */


/*3.1 get model data*/
  


data cs.model_data_hist;
merge cs.contact_summary_daily_holdout  cs.usage_summary_daily cs.subscription_summary_daily ;
by act_date;
log_cnt_cancellation =log(cnt_cancellation );
log_cnt_inqury =log(cnt_inqury );
log_cnt_regissue =log(cnt_regissue );
log_cnt_usage_error =log(cnt_usage_error );
log_cnt_others =log(cnt_others );
log_cnt_fraud =log(cnt_fraud );
log_cnt_campaign =log(cnt_campaign );
log_cnt_total=log(cnt_total);

log_CNT_REQUESTS_TTL =log(CNT_REQUESTS_TTL );
log_CNT_REQUESTS_APPLE =log(CNT_REQUESTS_APPLE );
log_CNT_REQUESTS_GOOGLE =log(CNT_REQUESTS_GOOGLE );
log_CNT_REQUESTS_ROKU=log(CNT_REQUESTS_ROKU);
log_CNT_ACTIVE_TTL =log(CNT_ACTIVE_TTL );
log_CNT_ACTIVE_APPLE =log(CNT_ACTIVE_APPLE );
log_CNT_ACTIVE_GOOGLE =log(CNT_ACTIVE_GOOGLE );
log_CNT_ACTIVE_ROKU =log(CNT_ACTIVE_ROKU );
log_CNT_FREE_ADDS_TTL =log(CNT_FREE_ADDS_TTL );
log_CNT_FREE_ADDS_APPLE =log(CNT_FREE_ADDS_APPLE );
log_CNT_FREE_ADDS_GOOGLE =log(CNT_FREE_ADDS_GOOGLE );
log_CNT_FREE_ADDS_ROKU=log(CNT_FREE_ADDS_ROKU);
log_CNT_RECONNECT_ADDS_TTL =log(CNT_RECONNECT_ADDS_TTL );
log_CNT_RECONNECT_ADDS_APPLE =log(CNT_RECONNECT_ADDS_APPLE );
log_CNT_RECONNECT_ADDS_GOOGLE =log(CNT_RECONNECT_ADDS_GOOGLE );
log_CNT_RECONNECT_ADDS_ROKU=log(CNT_RECONNECT_ADDS_ROKU);
where   act_date<'10sep2017'd;
run;



 /*******************************************************************/
/** append previous month data for calculate model data*/
proc sql;
create table  forecast_monthly as
select a.*,
c.free_add_TOTAL as free_add_TOTAL_last,
c.convert_to_paid_TOTAL as convert_to_paid_TOTAL_last,
c.reconnect_TOTAL as reconnect_TOTAL_last,
c.paid_TOTAL as paid_TOTAL_last,
c.free_add_APPLE as free_add_APPLE_last,
c.convert_to_paid_APPLE as convert_to_paid_APPLE_last,
c.reconnect_APPLE as reconnect_APPLE_last,
c.paid_APPLE as paid_APPLE_last,
c.free_add_GOOGLE as free_add_GOOGLE_last,
c.convert_to_paid_GOOGLE as convert_to_paid_GOOGLE_last,
c.reconnect_GOOGLE as reconnect_GOOGLE_last,
c.paid_GOOGLE as paid_GOOGLE_last,
c.free_add_ROKU as free_add_ROKU_last,
c.convert_to_paid_ROKU as convert_to_paid_ROKU_last,
c.reconnect_ROKU as reconnect_ROKU_last,
c.paid_ROKU as paid_ROKU_last,
c.free_add_AMAZON as free_add_AMAZON_last,
c.convert_to_paid_AMAZON as convert_to_paid_AMAZON_last,
c.reconnect_AMAZON as reconnect_AMAZON_last,
c.paid_AMAZON as paid_AMAZON_last,
c.mvpd_hulu as mvpd_hulu_last,
a.mvpd_hulu-c.mvpd_hulu as net_mvpd_hulu
from  cs.forecast_monthly a
left join cs.forecast_monthly c
on  a.month = intnx('month',c.month,1)  
where a.month>'01dec2015'd
;
quit;




/* get 2016 index to 2017,2018,2019,2020,2021,2022 */
proc sql;
create table  forecast_monthly_index_2017 as
select distinct a.act_date,
b.y2016 as date_actual_data,
b.date_project_year as project_date,
CNT_REQUESTS_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_TTL,
CNT_REQUESTS_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_APPLE,
CNT_REQUESTS_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_GOOGLE,
CNT_REQUESTS_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_ROKU,
CNT_REQUESTS_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_AMAZON,
CNT_REQUESTS_hulu/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_hulu,

CNT_NOPLAY_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_TTL,
CNT_NOPLAY_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_APPLE,
CNT_NOPLAY_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_GOOGLE,
CNT_NOPLAY_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_ROKU,
CNT_NOPLAY_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_AMAZON,

CNT_ACTIVE_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_TTL,
CNT_ACTIVE_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_APPLE,
CNT_ACTIVE_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_GOOGLE,
CNT_ACTIVE_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_ROKU,
CNT_ACTIVE_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_AMAZON,
CNT_ACTIVE_hulu/((c.mvpd_hulu_last+c.mvpd_hulu_last)/2) as  index_CNT_ACTIVE_hulu,

CNT_FREE_ADDS_TTL/ (c.free_add_TOTAL)  as  index_CNT_FREE_ADDS_TTL,
CNT_FREE_ADDS_APPLE/(c.free_add_APPLE)  as  index_CNT_FREE_ADDS_APPLE,
CNT_FREE_ADDS_GOOGLE/(c.free_add_GOOGLE)  as  index_CNT_FREE_ADDS_GOOGLE,
CNT_FREE_ADDS_ROKU/(c.free_add_ROKU)  as  index_CNT_FREE_ADDS_ROKU,
CNT_FREE_ADDS_AMAZON/(c.free_add_AMAZON)  as  index_CNT_FREE_ADDS_AMAZON,

CNT_SUB_FREE_TTL/((c.free_add_TOTAL+c.free_add_TOTAL_last)/2) as  index_CNT_SUB_FREE_TTL,
CNT_SUB_FREE_APPLE/((c.free_add_APPLE+c.free_add_APPLE_last)/2) as  index_CNT_SUB_FREE_APPLE,
CNT_SUB_FREE_GOOGLE/((c.free_add_GOOGLE+c.free_add_GOOGLE_last)/2) as  index_CNT_SUB_FREE_GOOGLE,
CNT_SUB_FREE_ROKU/((c.free_add_ROKU+c.free_add_ROKU_last)/2) as  index_CNT_SUB_FREE_ROKU,
CNT_SUB_FREE_AMAZON/((c.free_add_AMAZON+c.free_add_AMAZON_last)/2) as  index_CNT_SUB_FREE_AMAZON,

CNT_RECONNECT_ADDS_TTL/ (c.reconnect_total)  as  index_CNT_RECONNECT_ADDS_TTL,
CNT_RECONNECT_ADDS_APPLE/(c.reconnect_APPLE)  as  index_CNT_RECONNECT_ADDS_APPLE,
CNT_RECONNECT_ADDS_GOOGLE/(c.reconnect_GOOGLE)  as  index_CNT_RECONNECT_ADDS_GOOGLE,
CNT_RECONNECT_ADDS_ROKU/(c.reconnect_ROKU)  as  index_CNT_RECONNECT_ADDS_ROKU,
CNT_RECONNECT_ADDS_AMAZON/(c.reconnect_AMAZON)  as  index_CNT_RECONNECT_ADDS_AMAZON,

CNT_RENEWALS_TTL/(c.paid_total_last) as  index_CNT_RENEWALS_TTL,
CNT_RENEWALS_APPLE/(c.paid_APPLE_last) as  index_CNT_RENEWALS_APPLE,
CNT_RENEWALS_GOOGLE/(c.paid_GOOGLE_last) as  index_CNT_RENEWALS_GOOGLE,
CNT_RENEWALS_ROKU/(c.paid_ROKU_last) as  index_CNT_RENEWALS_ROKU,
CNT_RENEWALS_AMAZON/(c.paid_AMAZON_last) as  index_CNT_RENEWALS_AMAZON,

CNT_RENEWALS_FREE_TTL/(c.free_add_TOTAL_last) as  index_CNT_RENEWALS_FREE_TTL,
CNT_RENEWALS_FREE_APPLE/(c.free_add_APPLE_last) as  index_CNT_RENEWALS_FREE_APPLE,
CNT_RENEWALS_FREE_GOOGLE/(c.free_add_GOOGLE_last) as  index_CNT_RENEWALS_FREE_GOOGLE,
CNT_RENEWALS_FREE_ROKU/(c.free_add_ROKU_last) as  index_CNT_RENEWALS_FREE_ROKU,
CNT_RENEWALS_FREE_AMAZON/(c.free_add_AMAZON_last) as  index_CNT_RENEWALS_FREE_AMAZON,

CNT_SUB_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_TTL,
CNT_SUB_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_APPLE,
CNT_SUB_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_GOOGLE,
CNT_SUB_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_ROKU,
CNT_SUB_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_AMAZOn
from cs.model_data_hist a /*daily historial*/
inner join forecast_monthly c on  month(a.act_date)=month(c.month) and  (c.month>='01sep2016'd  and c.month<'01sep2017'd )/*append monthly forcast*/
inner join CS.program_date b on  a.act_date=b.y2016 and year(b.date_project_year)=2017 /* add daily index to programming window*/
order by b.date_project_year;
quit;


proc contents data= cs.model_data_hist varnum;run;
 

proc sql;
create table  forecast_monthly_index_2018 as
select distinct a.act_date,
b.y2016 as date_actual_data,
b.date_project_year as project_date,
CNT_REQUESTS_TTL/(((((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_TTL,
CNT_REQUESTS_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_APPLE,
CNT_REQUESTS_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_GOOGLE,
CNT_REQUESTS_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_ROKU,
CNT_REQUESTS_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_AMAZON,
CNT_REQUESTS_hulu/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_hulu,
CNT_NOPLAY_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_TTL,
CNT_NOPLAY_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_APPLE,
CNT_NOPLAY_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_GOOGLE,
CNT_NOPLAY_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_ROKU,
CNT_NOPLAY_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_AMAZON,
CNT_ACTIVE_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_TTL,
CNT_ACTIVE_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_APPLE,
CNT_ACTIVE_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_GOOGLE,
CNT_ACTIVE_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_ROKU,
CNT_ACTIVE_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_AMAZON,
CNT_ACTIVE_hulu/((c.mvpd_hulu_last+c.mvpd_hulu_last)/2) as  index_CNT_ACTIVE_hulu,

CNT_FREE_ADDS_TTL/ (c.free_add_TOTAL)  as  index_CNT_FREE_ADDS_TTL,
CNT_FREE_ADDS_APPLE/(c.free_add_APPLE)  as  index_CNT_FREE_ADDS_APPLE,
CNT_FREE_ADDS_GOOGLE/(c.free_add_GOOGLE)  as  index_CNT_FREE_ADDS_GOOGLE,
CNT_FREE_ADDS_ROKU/(c.free_add_ROKU)  as  index_CNT_FREE_ADDS_ROKU,
CNT_FREE_ADDS_AMAZON/(c.free_add_AMAZON)  as  index_CNT_FREE_ADDS_AMAZON,

CNT_SUB_FREE_TTL/((c.free_add_TOTAL+c.free_add_TOTAL_last)/2) as  index_CNT_SUB_FREE_TTL,
CNT_SUB_FREE_APPLE/((c.free_add_APPLE+c.free_add_APPLE_last)/2) as  index_CNT_SUB_FREE_APPLE,
CNT_SUB_FREE_GOOGLE/((c.free_add_GOOGLE+c.free_add_GOOGLE_last)/2) as  index_CNT_SUB_FREE_GOOGLE,
CNT_SUB_FREE_ROKU/((c.free_add_ROKU+c.free_add_ROKU_last)/2) as  index_CNT_SUB_FREE_ROKU,
CNT_SUB_FREE_AMAZON/((c.free_add_AMAZON+c.free_add_AMAZON_last)/2) as  index_CNT_SUB_FREE_AMAZON,

CNT_RECONNECT_ADDS_TTL/ (c.reconnect_total)  as  index_CNT_RECONNECT_ADDS_TTL,
CNT_RECONNECT_ADDS_APPLE/(c.reconnect_APPLE)  as  index_CNT_RECONNECT_ADDS_APPLE,
CNT_RECONNECT_ADDS_GOOGLE/(c.reconnect_GOOGLE)  as  index_CNT_RECONNECT_ADDS_GOOGLE,
CNT_RECONNECT_ADDS_ROKU/(c.reconnect_ROKU)  as  index_CNT_RECONNECT_ADDS_ROKU,
CNT_RECONNECT_ADDS_AMAZON/(c.reconnect_AMAZON)  as  index_CNT_RECONNECT_ADDS_AMAZON,

CNT_RENEWALS_TTL/(c.paid_total_last) as  index_CNT_RENEWALS_TTL,
CNT_RENEWALS_APPLE/(c.paid_APPLE_last) as  index_CNT_RENEWALS_APPLE,
CNT_RENEWALS_GOOGLE/(c.paid_GOOGLE_last) as  index_CNT_RENEWALS_GOOGLE,
CNT_RENEWALS_ROKU/(c.paid_ROKU_last) as  index_CNT_RENEWALS_ROKU,
CNT_RENEWALS_AMAZON/(c.paid_AMAZON_last) as  index_CNT_RENEWALS_AMAZON,

CNT_RENEWALS_FREE_TTL/(c.free_add_TOTAL_last) as  index_CNT_RENEWALS_FREE_TTL,
CNT_RENEWALS_FREE_APPLE/(c.free_add_APPLE_last) as  index_CNT_RENEWALS_FREE_APPLE,
CNT_RENEWALS_FREE_GOOGLE/(c.free_add_GOOGLE_last) as  index_CNT_RENEWALS_FREE_GOOGLE,
CNT_RENEWALS_FREE_ROKU/(c.free_add_ROKU_last) as  index_CNT_RENEWALS_FREE_ROKU,
CNT_RENEWALS_FREE_AMAZON/(c.free_add_AMAZON_last) as  index_CNT_RENEWALS_FREE_AMAZON,

CNT_SUB_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_TTL,
CNT_SUB_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_APPLE,
CNT_SUB_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_GOOGLE,
CNT_SUB_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_ROKU,
CNT_SUB_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_AMAZOn
from cs.model_data_hist a /*daily*/
inner join forecast_monthly c on month(a.act_date)=month(c.month) and  (c.month>='01sep2016'd  and c.month<'01sep2017'd )/* monthly forcast*/
inner join CS.program_date b on a.act_date = b.y2016  and year(b.date_project_year)=2018 /* to daily*/
order by b.date_project_year;
quit;
  


proc sql;
create table  forecast_monthly_index_2019 as
select distinct a.act_date,
b.y2016 as date_actual_data,
b.date_project_year as project_date,
CNT_REQUESTS_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_TTL,
CNT_REQUESTS_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_APPLE,
CNT_REQUESTS_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_GOOGLE,
CNT_REQUESTS_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_ROKU,
CNT_REQUESTS_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_AMAZON,
CNT_REQUESTS_hulu/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_REQUESTS_hulu,

CNT_NOPLAY_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_TTL,
CNT_NOPLAY_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_APPLE,
CNT_NOPLAY_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_GOOGLE,
CNT_NOPLAY_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_ROKU,
CNT_NOPLAY_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_NOPLAY_AMAZON,
CNT_ACTIVE_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_TTL,
CNT_ACTIVE_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_APPLE,
CNT_ACTIVE_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_GOOGLE,
CNT_ACTIVE_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_ROKU,
CNT_ACTIVE_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_ACTIVE_AMAZON,
CNT_ACTIVE_hulu/((c.mvpd_hulu_last+c.mvpd_hulu_last)/2) as  index_CNT_ACTIVE_hulu,

CNT_FREE_ADDS_TTL/ (c.free_add_TOTAL)  as  index_CNT_FREE_ADDS_TTL,
CNT_FREE_ADDS_APPLE/(c.free_add_APPLE)  as  index_CNT_FREE_ADDS_APPLE,
CNT_FREE_ADDS_GOOGLE/(c.free_add_GOOGLE)  as  index_CNT_FREE_ADDS_GOOGLE,
CNT_FREE_ADDS_ROKU/(c.free_add_ROKU)  as  index_CNT_FREE_ADDS_ROKU,
CNT_FREE_ADDS_AMAZON/(c.free_add_AMAZON)  as  index_CNT_FREE_ADDS_AMAZON,

CNT_SUB_FREE_TTL/((c.free_add_TOTAL+c.free_add_TOTAL_last)/2) as  index_CNT_SUB_FREE_TTL,
CNT_SUB_FREE_APPLE/((c.free_add_APPLE+c.free_add_APPLE_last)/2) as  index_CNT_SUB_FREE_APPLE,
CNT_SUB_FREE_GOOGLE/((c.free_add_GOOGLE+c.free_add_GOOGLE_last)/2) as  index_CNT_SUB_FREE_GOOGLE,
CNT_SUB_FREE_ROKU/((c.free_add_ROKU+c.free_add_ROKU_last)/2) as  index_CNT_SUB_FREE_ROKU,
CNT_SUB_FREE_AMAZON/((c.free_add_AMAZON+c.free_add_AMAZON_last)/2) as  index_CNT_SUB_FREE_AMAZON,

CNT_RECONNECT_ADDS_TTL/ (c.reconnect_total)  as  index_CNT_RECONNECT_ADDS_TTL,
CNT_RECONNECT_ADDS_APPLE/(c.reconnect_APPLE)  as  index_CNT_RECONNECT_ADDS_APPLE,
CNT_RECONNECT_ADDS_GOOGLE/(c.reconnect_GOOGLE)  as  index_CNT_RECONNECT_ADDS_GOOGLE,
CNT_RECONNECT_ADDS_ROKU/(c.reconnect_ROKU)  as  index_CNT_RECONNECT_ADDS_ROKU,
CNT_RECONNECT_ADDS_AMAZON/(c.reconnect_AMAZON)  as  index_CNT_RECONNECT_ADDS_AMAZON,

CNT_RENEWALS_TTL/(c.paid_total_last) as  index_CNT_RENEWALS_TTL,
CNT_RENEWALS_APPLE/(c.paid_APPLE_last) as  index_CNT_RENEWALS_APPLE,
CNT_RENEWALS_GOOGLE/(c.paid_GOOGLE_last) as  index_CNT_RENEWALS_GOOGLE,
CNT_RENEWALS_ROKU/(c.paid_ROKU_last) as  index_CNT_RENEWALS_ROKU,
CNT_RENEWALS_AMAZON/(c.paid_AMAZON_last) as  index_CNT_RENEWALS_AMAZON,

CNT_RENEWALS_FREE_TTL/(c.free_add_TOTAL_last) as  index_CNT_RENEWALS_FREE_TTL,
CNT_RENEWALS_FREE_APPLE/(c.free_add_APPLE_last) as  index_CNT_RENEWALS_FREE_APPLE,
CNT_RENEWALS_FREE_GOOGLE/(c.free_add_GOOGLE_last) as  index_CNT_RENEWALS_FREE_GOOGLE,
CNT_RENEWALS_FREE_ROKU/(c.free_add_ROKU_last) as  index_CNT_RENEWALS_FREE_ROKU,
CNT_RENEWALS_FREE_AMAZON/(c.free_add_AMAZON_last) as  index_CNT_RENEWALS_FREE_AMAZON,

CNT_SUB_TTL/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_TTL,
CNT_SUB_APPLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_APPLE,
CNT_SUB_GOOGLE/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_GOOGLE,
CNT_SUB_ROKU/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_ROKU,
CNT_SUB_AMAZON/(((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2) as  index_CNT_SUB_AMAZOn
from cs.model_data_hist a /*daily*/
inner join forecast_monthly c on month(a.act_date)=month(c.month) and  (c.month>='01sep2016'd  and c.month<'01sep2017'd )/* monthly forcast*/
inner join CS.program_date b on a.act_date = b.y2016  and year(b.date_project_year)=2019 /* to daily*/
order by b.date_project_year;
quit;


data forecast_monthly_index;
set forecast_monthly_index_2017 forecast_monthly_index_2018 forecast_monthly_index_2019;
run;




/*get daily summary for scoring and 2017 projected numbers */
proc sql;
create table forecast_daily
as select distinct  
e.project_date  format mmddyy10., 

case when  a.act_date is not null then  a.cnt_cancellation  else  0 end as cnt_cancellation ,
case when  a.act_date is not null then   a.cnt_inqury  else  0 end as cnt_inqury ,
case when  a.act_date is not null then  a.cnt_regissue  else  0 end as cnt_regissue ,
case when  a.act_date is not null then  a.cnt_usage_error  else  0 end as cnt_usage_error,  
case when  a.act_date is not null then  a.cnt_total else  0 end as cnt_total,

case when  a.act_date is not null then  a.log_cnt_cancellation  else  0 end as log_cnt_cancellation ,
case when  a.act_date is not null then  a.log_cnt_inqury  else  0 end as log_cnt_inqury ,
case when  a.act_date is not null then  a.log_cnt_regissue  else  0 end as log_cnt_regissue ,
case when  a.act_date is not null then  a.log_cnt_usage_error  else  0 end as log_cnt_usage_error ,

 
/*calcuated 2017-2019 model data*/
case when  c.month<'01sep2017'd then  a.CNT_REQUESTS_TTL              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_REQUESTS_TTL  end as CNT_REQUESTS_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_REQUESTS_APPLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_REQUESTS_APPLE  end as CNT_REQUESTS_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_REQUESTS_GOOGLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_REQUESTS_GOOGLE  end as CNT_REQUESTS_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_REQUESTS_ROKU              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_REQUESTS_ROKU  end as CNT_REQUESTS_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_REQUESTS_AMAZON              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_REQUESTS_AMAZON  end as CNT_REQUESTS_AMAZON,/**/
case when  c.month<'01sep2017'd then  a.CNT_REQUESTS_hulu             else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_REQUESTS_hulu  end as CNT_REQUESTS_hulu,/**/
case when  c.month<'01sep2017'd then  a.CNT_NOPLAY_TTL              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_NOPLAY_TTL  end as CNT_NOPLAY_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_NOPLAY_APPLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_NOPLAY_APPLE  end as CNT_NOPLAY_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_NOPLAY_GOOGLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_NOPLAY_GOOGLE  end as CNT_NOPLAY_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_NOPLAY_ROKU              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_NOPLAY_ROKU  end as CNT_NOPLAY_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_NOPLAY_AMAZON              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_NOPLAY_AMAZON  end as CNT_NOPLAY_AMAZON,/**/
case when  c.month<'01sep2017'd then  a.CNT_ACTIVE_TTL              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_ACTIVE_TTL  end as CNT_ACTIVE_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_ACTIVE_APPLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_ACTIVE_APPLE  end as CNT_ACTIVE_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_ACTIVE_GOOGLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_ACTIVE_GOOGLE  end as CNT_ACTIVE_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_ACTIVE_ROKU              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_ACTIVE_ROKU  end as CNT_ACTIVE_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_ACTIVE_amazon              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_ACTIVE_amazon  end as CNT_ACTIVE_amazon,/**/
case when  c.month<'01sep2017'd then  a.CNT_ACTIVE_hulu              else  ((c.mvpd_hulu_last+c.mvpd_hulu_last)/2)*e.index_CNT_ACTIVE_hulu  end as CNT_ACTIVE_hulu,/**/

case when  c.month<'01sep2017'd then  a.CNT_FREE_ADDS_TTL              else   (c.free_add_TOTAL )*e.index_CNT_FREE_ADDS_TTL  end as CNT_FREE_ADDS_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_FREE_ADDS_APPLE              else  (c.free_add_apple)*e.index_CNT_FREE_ADDS_APPLE  end as CNT_FREE_ADDS_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_FREE_ADDS_GOOGLE              else  (c.free_add_google)*e.index_CNT_FREE_ADDS_GOOGLE  end as CNT_FREE_ADDS_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_FREE_ADDS_ROKU              else  (c.free_add_roku)*e.index_CNT_FREE_ADDS_ROKU  end as CNT_FREE_ADDS_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_FREE_ADDS_AMAZON              else  (c.free_add_amazon)*e.index_CNT_FREE_ADDS_AMAZON  end as CNT_FREE_ADDS_AMAZON,/**/

case when  c.month<'01sep2017'd then  a.CNT_SUB_FREE_TTL              else   ((c.free_add_TOTAL+c.free_add_TOTAL_last)/2)*e.index_CNT_SUB_FREE_TTL  end as CNT_SUB_FREE_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_FREE_APPLE              else   ((c.free_add_APPLE+c.free_add_APPLE_last)/2)*e.index_CNT_SUB_FREE_APPLE  end as CNT_SUB_FREE_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_FREE_GOOGLE              else   ((c.free_add_GOOGLE+c.free_add_GOOGLE_last)/2)*e.index_CNT_SUB_FREE_GOOGLE  end as CNT_SUB_FREE_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_FREE_ROKU              else   ((c.free_add_ROKU+c.free_add_ROKU_last)/2)*e.index_CNT_SUB_FREE_ROKU  end as CNT_SUB_FREE_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_FREE_AMAZON              else   ((c.free_add_AMAZON+c.free_add_AMAZON_last)/2)*e.index_CNT_SUB_FREE_AMAZON  end as CNT_SUB_FREE_AMAZON,/**/

case when  c.month<'01sep2017'd then  a.CNT_RECONNECT_ADDS_TTL              else  (c.reconnect_total)*e.index_CNT_RECONNECT_ADDS_TTL  end as CNT_RECONNECT_ADDS_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_RECONNECT_ADDS_APPLE              else  (c.reconnect_apple)*e.index_CNT_RECONNECT_ADDS_APPLE  end as CNT_RECONNECT_ADDS_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_RECONNECT_ADDS_GOOGLE              else  (c.reconnect_google)*e.index_CNT_RECONNECT_ADDS_GOOGLE  end as CNT_RECONNECT_ADDS_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_RECONNECT_ADDS_ROKU              else  (c.reconnect_roku)*e.index_CNT_RECONNECT_ADDS_ROKU  end as CNT_RECONNECT_ADDS_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_RECONNECT_ADDS_AMAZON              else  (c.reconnect_amazon)*e.index_CNT_RECONNECT_ADDS_AMAZON  end as CNT_RECONNECT_ADDS_AMAZON,/**/

case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_TTL              else  (c.paid_total_last)*e.index_CNT_RENEWALS_TTL  end as CNT_RENEWALS_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_APPLE              else  (c.paid_apple_last)*e.index_CNT_RENEWALS_APPLE  end as CNT_RENEWALS_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_GOOGLE              else  (c.paid_google_last)*e.index_CNT_RENEWALS_GOOGLE  end as CNT_RENEWALS_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_ROKU              else  (c.paid_roku_last)*e.index_CNT_RENEWALS_ROKU  end as CNT_RENEWALS_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_AMAZON              else  (c.paid_amazon_last)*e.index_CNT_RENEWALS_AMAZON  end as CNT_RENEWALS_AMAZON,/**/

case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_FREE_TTL              else  (c.free_add_TOTAL_last)*e.index_CNT_RENEWALS_FREE_TTL  end as CNT_RENEWALS_FREE_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_FREE_APPLE              else  (c.free_add_APPLE_last)*e.index_CNT_RENEWALS_FREE_APPLE  end as CNT_RENEWALS_FREE_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_FREE_GOOGLE              else  (c.free_add_GOOGLE_last)*e.index_CNT_RENEWALS_FREE_GOOGLE  end as CNT_RENEWALS_FREE_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_FREE_ROKU              else  (c.free_add_ROKU_last)*e.index_CNT_RENEWALS_FREE_ROKU  end as CNT_RENEWALS_FREE_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_RENEWALS_FREE_AMAZON              else  (c.free_add_AMAZON_last)*e.index_CNT_RENEWALS_FREE_AMAZON  end as CNT_RENEWALS_FREE_AMAZON,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_TTL              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_SUB_TTL  end as CNT_SUB_TTL,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_APPLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_SUB_APPLE  end as CNT_SUB_APPLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_GOOGLE              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_SUB_GOOGLE  end as CNT_SUB_GOOGLE,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_ROKU              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_SUB_ROKU  end as CNT_SUB_ROKU,/**/
case when  c.month<'01sep2017'd then  a.CNT_SUB_AMAZON              else  (((c.free_add_TOTAL+c.paid_TOTAL)+(c.free_add_TOTAL_last+c.paid_TOTAL_last))/2)*e.index_CNT_SUB_AMAZON  end as CNT_SUB_AMAZON,/**/
/*case when  c.month<'01sep2017'd then  a.log_cnt_active_ttl else  log(calculated  cnt_active_ttl)  end as log_cnt_active_ttl,*/
 
case when weekday(e.project_date)=1 then 1 else 0 end as dow_1_ind  ,/*sunday*/
case when weekday(e.project_date)=2 then 1 else 0 end as dow_2_ind  ,
case when weekday(e.project_date)=3 then 1 else 0 end as dow_3_ind  ,
case when weekday(e.project_date)=4 then 1 else 0 end as dow_4_ind  ,
case when weekday(e.project_date)=5 then 1 else 0 end as dow_5_ind  ,
case when weekday(e.project_date)=6 then 1 else 0 end as dow_6_ind  ,
case when weekday(e.project_date)=7 then 1 else 0 end as dow_7_ind
from  forecast_monthly c 
inner join  forecast_monthly_index  e on   month(c.month) = month(e.project_date) and
            year(c.month)= year(e.project_date)   /*get daily estimate based on 2016-2017 actual daily to monthly index*/
left join (select * from  cs.model_data_hist where act_date>='01sep2016'd and act_date<'01sep2017'd) a  
on month(a.act_date)=month(c.month) and a.act_date=e.project_date
where e.project_date is not null /*and calculated cal_date>'01may2017'd*/
;
quit; 


 /*2016 model data*/
data score_daily;
set  forecast_daily;
pct_renewals_apple = (cnt_renewals_apple/cnt_renewals_ttl);
pct_renewals_google = (cnt_renewals_google/cnt_renewals_ttl);
pct_renewals_roku = (cnt_renewals_roku/cnt_renewals_ttl);
pct_renewals_amazon = (cnt_renewals_amazon/cnt_renewals_ttl);
pct_renewals_free_apple = (cnt_renewals_free_apple/cnt_renewals_free_ttl);
pct_renewals_free_google = (cnt_renewals_free_google/cnt_renewals_free_ttl);
pct_renewals_free_roku = (cnt_renewals_free_roku/cnt_renewals_free_ttl);
pct_renewals_free_amazon = (cnt_renewals_free_amazon/cnt_renewals_free_ttl);
pct_sub_apple = (cnt_sub_apple/cnt_sub_ttl);
pct_sub_google = (cnt_sub_google/cnt_sub_ttl);
pct_sub_roku = (cnt_sub_roku/cnt_sub_ttl);
pct_sub_amazon = (cnt_sub_amazon/cnt_sub_ttl);
pct_sub_free_apple = (cnt_sub_free_apple/cnt_sub_free_ttl);
pct_sub_free_google = (cnt_sub_free_google/cnt_sub_free_ttl);
pct_sub_free_roku = (cnt_sub_free_roku/cnt_sub_free_ttl);
pct_sub_free_amazon = (cnt_sub_free_amazon/cnt_sub_free_ttl);
pct_cnt_free_adds_apple=(cnt_free_adds_apple/cnt_free_adds_ttl);
pct_cnt_free_adds_google=(cnt_free_adds_google/cnt_free_adds_ttl);
pct_cnt_free_adds_roku=(cnt_free_adds_roku/cnt_free_adds_ttl);
pct_cnt_free_adds_amazon=(cnt_free_adds_amazon/cnt_free_adds_ttl);
pct_active_google= (cnt_active_google/cnt_active_ttl);
pct_active_apple= (cnt_active_apple/cnt_active_ttl);
pct_active_amazon= (cnt_active_amazon/cnt_active_ttl);
pct_active_roku= (cnt_active_roku/cnt_active_ttl);

log_CNT_ACTIVE_TTL =log(CNT_ACTIVE_TTL );
log_CNT_ACTIVE_APPLE =log(CNT_ACTIVE_APPLE );
log_CNT_ACTIVE_GOOGLE =log(CNT_ACTIVE_GOOGLE );
log_CNT_ACTIVE_ROKU =log(CNT_ACTIVE_ROKU );
log_CNT_FREE_ADDS_TTL =log(CNT_FREE_ADDS_TTL );
log_CNT_FREE_ADDS_APPLE =log(CNT_FREE_ADDS_APPLE );
log_CNT_FREE_ADDS_GOOGLE =log(CNT_FREE_ADDS_GOOGLE );
log_CNT_FREE_ADDS_ROKU=log(CNT_FREE_ADDS_ROKU);
log_CNT_RECONNECT_ADDS_TTL =log(CNT_RECONNECT_ADDS_TTL );
log_CNT_RECONNECT_ADDS_APPLE =log(CNT_RECONNECT_ADDS_APPLE );
log_CNT_RECONNECT_ADDS_GOOGLE =log(CNT_RECONNECT_ADDS_GOOGLE );
log_CNT_RECONNECT_ADDS_ROKU=log(CNT_RECONNECT_ADDS_ROKU);
log_CNT_REQUESTS_TTL =log(CNT_REQUESTS_TTL );
rename project_date=act_date;
run;

proc contents data=score_daily varnum;run;



* get test and 2 training data;
data  train train1 train2 test1 test2 ;
set  cs.model_data_holdout;
if act_date<'10jul2017'd and act_date>='01feb2017'd  then output train1;
else if act_date<'01sep2017'd  and  act_date>='10jul2017'd then output train2;
else  if act_date<'01feb2017'd then output test1;
else if act_date>='01sep2017'd then output test2 ;
if act_date<'01sep2017'd then output train;
run;


proc corr data=train;
var  cnt_cancellation log_cnt_inqury   log_cnt_regissue   log_cnt_usage_error;
with pct_active_apple--pct_cnt_free_adds_amazon  log_CNT_REQUESTS_TTL--log_CNT_RECONNECT_ADDS_ROKU	 CNT_REQUESTS_TTL--CNT_REQUESTS_MVPD;run;



/*******************************************************log_cnt_regissue*/
proc reg data=train outest=cs.reg_score_regissue;
model  log_cnt_regissue = 
dow_2_ind dow_3_ind dow_4_ind log_CNT_FREE_ADDS_TTL  log_CNT_RECONNECT_ADDS_GOOGLE CNT_SUB_FREE_ROKU
 / tol vif collin selection=stepwise  details=summary sls=0.1 sle=0.15;
output out=t1 p=yhat residual=yresid;
plot residual.*log_cnt_regissue;
run;

proc score data=score_daily score=cs.reg_score_regissue out=score_out_regissue   type=parms;
var dow_2_ind dow_3_ind dow_4_ind   log_CNT_FREE_ADDS_TTL 
log_CNT_RECONNECT_ADDS_GOOGLE CNT_SUB_FREE_ROKU;run;

data score_out_regissue;
set score_out_regissue(keep=act_date cnt_regissue   model1);
scored_regissue=round(exp( model1 ));
avg_diff_regissue=cnt_regissue -scored_regissue;
if act_date>'01feb2017'd and act_date<'10jul2017'd then tp='train1';else
if act_date<'01sep2017'd and act_date>='10jul2017'd then tp='train2';else
if act_date<'01feb2017'd then tp='tst1';else
if act_date>='01sep2017'd and act_date<'10sep2017'd then tp='tst2';
if act_date>='01oct2017'd and act_date<'10nov2017'd then tp='oct';
drop model1;
run;

proc means data=score_out_regissue;class tp; var cnt_regissue scored_regissue avg_diff_regissue; run;


/******************************************cnt_cancellation*/
proc reg data= train outest=cs.reg_score_cancellation;
model  cnt_cancellation =  
CNT_FREE_ADDS_APPLE CNT_REQUESTS_TTL CNT_REQUESTS_ROKU CNT_ACTIVE_GOOGLE CNT_ACTIVE_ROKU CNT_RENEWALS_GOOGLE CNT_RENEWALS_TTL  CNT_SUB_TTL
/ tol vif collin selection=stepwise  details=summary sls=0.15 sle=0.15;
/*output out=t1 p=yhat residual=yresid;*/
plot residual.*cnt_cancellation;
run;
   
proc score data=score_daily score=cs.reg_score_cancellation out=score_out_cancellation type=parms;
var CNT_FREE_ADDS_APPLE CNT_REQUESTS_TTL CNT_REQUESTS_ROKU CNT_ACTIVE_GOOGLE CNT_ACTIVE_ROKU CNT_RENEWALS_GOOGLE CNT_RENEWALS_TTL CNT_SUB_TTL
 ;run;
 
data score_out_cancellation;
set score_out_cancellation (keep=act_date cnt_cancellation   model1);
scored_cancellation= model1*1.2 ;
avg_diff_cancellation=cnt_cancellation-scored_cancellation;
if act_date>'01feb2017'd and act_date<'10jul2017'd then tp='train1';else
if act_date<'01sep2017'd and act_date>='10jul2017'd then tp='train2';else
if act_date<'01feb2017'd then tp='tst1';else
if act_date>='01sep2017'd and act_date<'10sep2017'd then tp='tst2';
drop model1;
run;

proc means data=score_out_cancellation ;class tp; var cnt_cancellation  scored_cancellation avg_diff_cancellation; run;


/****************************************log_cnt_usage_error*/
proc reg data= train outest=cs.reg_score_usage_error;
model  log_cnt_usage_error = 
dow_2_ind
dow_3_ind
dow_4_ind
pct_renewals_google
pct_cnt_free_adds_apple
log_CNT_RECONNECT_ADDS_GOOGLE
CNT_REQUESTS_ROKU
/*log_CNT_RECONNECT_ADDS_GOOGLE  dow_2_ind   dow_3_ind dow_4_ind CNT_REQUESTS_TTL */
/ tol vif collin selection=stepwise  details=summary sls=0.10 sle=0.15;
/*output out=t1 p=yhat residual=yresid;*/
plot residual.*log_cnt_usage_error;
run;
 
proc score data=score_daily score=cs.reg_score_usage_error out=score_out_usage_error   type=parms;
var dow_2_ind
dow_3_ind
dow_4_ind
pct_renewals_google
pct_cnt_free_adds_apple
log_CNT_RECONNECT_ADDS_GOOGLE
CNT_REQUESTS_ROKU
;run;

data score_out_usage_error;
set score_out_usage_error(keep=act_date cnt_usage_error   model1);
scored_usage_error=round(exp( model1 ));
avg_diff_usage_error=cnt_usage_error -scored_usage_error;
if act_date>'01feb2017'd and act_date<'10jul2017'd then tp='train1';else
if act_date<'01sep2017'd and act_date>='10jul2017'd then tp='train2';else
if act_date<'01feb2017'd then tp='tst1';else
if act_date>='01sep2017'd and act_date<'10sep2017'd then tp='tst2';
if act_date>='01oct2017'd and act_date<'10nov2017'd then tp='oct';
drop model1;
run;

proc means data=score_out_usage_error;class tp; var cnt_usage_error scored_usage_error avg_diff_usage_error; run;


/***********************************log_cnt_inqury*/
proc reg data= train   outest=cs.reg_score_inquiry;
model  log_cnt_inqury = 
dow_1_ind pct_sub_free_google pct_sub_free_roku pct_cnt_free_adds_amazon log_CNT_FREE_ADDS_APPLE CNT_REQUESTS_HULU 
/*dow_2_ind dow_3_ind  log_CNT_FREE_ADDS_TTL pct_active_apple log_CNT_REQUESTS_TTL */
 / tol vif collin  selection=stepwise details=summary sls=0.10 sle=0.15 ;
output out=t1 p=yhat residual=yresid;
plot residual.*log_cnt_inqury;
run; 
    
proc score data=score_daily score=cs.reg_score_inquiry out=score_out_inquiry   type=parms;
var dow_1_ind pct_sub_free_google pct_sub_free_roku pct_cnt_free_adds_amazon log_CNT_FREE_ADDS_APPLE CNT_REQUESTS_HULU 
;run;


data score_out_inquiry;
set score_out_inquiry(keep=act_date cnt_inqury   model1);
scored_inquiry=round(exp(model1 ));
avg_diff_inquiry=cnt_inqury -scored_inquiry;
if act_date>'01feb2017'd and act_date<'10jul2017'd then tp='train1';else
if act_date<'01sep2017'd and act_date>='10jul2017'd then tp='train2';else
if act_date<'01feb2017'd then tp='tst1';else
if act_date>='01sep2017'd and act_date<'10sep2017'd then tp='tst2';
if act_date>='01oct2017'd and act_date<'10nov2017'd then tp='oct';
drop model1;

run;


proc means data=score_out_inquiry;class tp; var cnt_inqury scored_inquiry avg_diff_inquiry; run;

data fscore;
set score_daily ;
set score_out_cancellation;
set score_out_usage_error;
set score_out_inquiry;
set score_out_regissue;
keep act_date scored_cancellation--avg_diff_regissue; 
run;
